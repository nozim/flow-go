// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onflow/flow-go/engine/access/rpc/backend (interfaces: Communicator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backend "github.com/onflow/flow-go/engine/access/rpc/backend"
	flow "github.com/onflow/flow-go/model/flow"
)

// MockCommunicator is a mock of Communicator interface.
type MockCommunicator struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicatorMockRecorder
}

// MockCommunicatorMockRecorder is the mock recorder for MockCommunicator.
type MockCommunicatorMockRecorder struct {
	mock *MockCommunicator
}

// NewMockCommunicator creates a new mock instance.
func NewMockCommunicator(ctrl *gomock.Controller) *MockCommunicator {
	mock := &MockCommunicator{ctrl: ctrl}
	mock.recorder = &MockCommunicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunicator) EXPECT() *MockCommunicatorMockRecorder {
	return m.recorder
}

// CallAvailableNode mocks base method.
func (m *MockCommunicator) CallAvailableNode(arg0 flow.IdentityList, arg1 backend.NodeAction, arg2 backend.ErrorTerminator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallAvailableNode", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallAvailableNode indicates an expected call of CallAvailableNode.
func (mr *MockCommunicatorMockRecorder) CallAvailableNode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAvailableNode", reflect.TypeOf((*MockCommunicator)(nil).CallAvailableNode), arg0, arg1, arg2)
}
